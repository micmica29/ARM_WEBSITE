@page
@model ARM_WEBSITE.Pages.AcademicHead.CreateScheduleModel
@{
    ViewData["Title"] = "Create Schedule";
    Layout = null;

    // Sample data in C#
    var days = new string[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
    var timeSlots = Enumerable.Range(0, 26).Select(i =>
    {
        int hour = 7 + (i / 2);
        string min = i % 2 == 0 ? "00" : "30";
        int endHour = hour + (i % 2 == 0 ? 0 : 1);
        string endMin = i % 2 == 0 ? "30" : "00";
        string displayHour = (hour > 12 ? hour - 12 : hour).ToString();
        string displayEndHour = (endHour > 12 ? endHour - 12 : endHour).ToString();
        string ampm = hour < 12 ? "AM" : "PM";
        string endAmpm = endHour < 12 ? "AM" : "PM";
        return $"{displayHour}:{min} {ampm} - {displayEndHour}:{endMin} {endAmpm}";
    }).ToArray();

    var subjects = new List<dynamic> {
        new { Id="sub1", Name="Math 101", Hours=1, IsLab=false, Color="#FFB6C1" },
        new { Id="sub2", Name="Physics Lab", Hours=1.5, IsLab=true, Color="#87CEFA" },
        new { Id="sub3", Name="English", Hours=2, IsLab=false, Color="#90EE90" }
    };

    var rooms = new List<dynamic> {
        new { Name="Room 101", Type="Lecture" },
        new { Name="Room 102", Type="Lecture" },
        new { Name="Lab A", Type="Laboratory" },
        new { Name="Lab B", Type="Laboratory" }
    };
}
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html, body {
            height: 100%;
            width: 100%;
            font-family: 'Inter', sans-serif;
            background: #f5f5f5;
        }

        body {
            display: flex;
            flex-direction: column;
        }

        .main-area {
            flex: 1;
            display: flex;
            height: 100%;
        }

        .sidebar {
            width: 260px;
            background: #003366;
            color: white;
            padding: 20px;
            font-size: 18px;
            height: 100vh;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

            .sidebar h2 {
                text-align: center;
                margin-bottom: 20px;
                font-size: 20px;
                font-weight: 600;
                border-bottom: 2px solid #0055aa;
                padding-bottom: 10px;
            }

        #subjectsList {
            display: flex;
            flex-direction: column;
            gap: 10px;
            align-items: stretch;
        }

        .subject {
            border: 1px solid #aaa;
            padding: 10px;
            border-radius: 6px;
            cursor: grab;
            text-align: center;
            transition: transform 0.2s, box-shadow 0.2s;
            color: black;
            font-weight: 600;
            background: #f9f9f9;
        }

            .subject:hover {
                transform: scale(1.05);
                box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            }

        .content {
            flex: 1;
            padding: 25px;
            font-size: 18px;
            overflow-y: auto;
            height: 100%;
        }

        .header-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .btn-create {
            padding: 10px 16px;
            font-size: 16px;
            font-weight: bold;
            border: none;
            border-radius: 6px;
            background: green;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: background 0.2s;
        }

            .btn-create:hover {
                background: #0055aa;
            }

        #scheduleTable {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

            #scheduleTable th, #scheduleTable td {
                border: 1px solid #ccc;
                text-align: center;
                vertical-align: middle;
                padding: 0;
                width: 120px;
                height: 60px;
                position: relative;
            }

        td.slot {
            overflow: hidden;
        }

        .subject-content {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            gap: 4px;
            padding: 2px;
            box-sizing: border-box;
        }

        select {
            width: 90%;
            text-align: center;
        }

        button.remove {
            font-size: 0.8rem;
            background: tomato;
            color: #fff;
            border: none;
            border-radius: 4px;
            padding: 2px 6px;
            cursor: pointer;
        }
    </style>

    <div class="main-area">
        <!-- Sidebar -->
        <div class="sidebar">
            <h2>Subjects</h2>
            <div id="subjectsList">
                @foreach (var subj in subjects)
                {
                    <div class="subject" draggable="true" style="background:@subj.Color" data-id="@subj.Id">
                        @subj.Name (@subj.Hours hr@(subj.Hours > 1 ? "s" : ""))
                    </div>
                }
            </div>
        </div>

        <!-- Content -->
        <div class="content">
            <div class="header-row">
                <h2>BSIT - BT1101</h2>
                <div style="display:flex; gap:10px;">
                    <button class="btn-create" onclick="alert('Open modal')">➕ Create Schedule</button>
                    <button class="btn-create" style="background: #0056d2;" onclick="saveSchedule()">💾 Save</button>
                </div>
            </div>

            <!-- Schedule Table -->
            <table id="scheduleTable">
                <thead>
                    <tr>
                        <th>Time</th>
                        @foreach (var day in days)
                        {
                            <th>@day</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int r = 0; r < timeSlots.Length; r++)
                    {
                        <tr>
                            <td>@timeSlots[r]</td>
                            @foreach (var day in days)
                            {
                                <td class="slot" data-key="@($"{day}_{r}")"></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <script>
        const days = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(days));
        const rooms = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(rooms));
        let subjects = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(subjects));

        const schedule = {};
        const subjectsList = document.getElementById("subjectsList");

        function renderSidebar() {
            subjectsList.innerHTML="";
            subjects.forEach(subj=>{
                const div=document.createElement("div");
                div.className="subject";
                div.draggable=true;
                div.textContent=`${subj.Name} (${subj.Hours} hr${subj.Hours>1?'s':''})`;
                div.style.backgroundColor=subj.Color;
                div.addEventListener("dragstart",e=>e.dataTransfer.setData("subject",JSON.stringify(subj)));
                subjectsList.appendChild(div);
            });
        }

        // Drag & drop
        document.querySelectorAll("td.slot").forEach(td=>{
            td.addEventListener("dragover",e=>e.preventDefault());
            td.addEventListener("drop", e=>{
                const subj = JSON.parse(e.dataTransfer.getData("subject"));
                const rowIndex = parseInt(td.dataset.key.split("_")[1]);
                const slotCount = Math.round(subj.Hours*2);

                // Check slots
                if(rowIndex+slotCount > @timeSlots.Length){ alert("Not enough slots"); return; }
                for(let i=0;i<slotCount;i++){ if(schedule[`${td.dataset.key.split("_")[0]}_${rowIndex+i}`]){ alert("Slot occupied"); return; } }

                td.rowSpan = slotCount;
                td.style.backgroundColor=subj.Color;
                td.style.color="#000";
                td.innerHTML="";

                const container = document.createElement("div");
                container.className="subject-content";
                const title = document.createElement("div");
                title.textContent=subj.Name;
                container.appendChild(title);

                const select = document.createElement("select");
                const allowed = rooms.filter(r=>r.Type === (subj.IsLab ? "Laboratory" : "Lecture"));
                const opt0 = document.createElement("option"); opt0.value=""; opt0.textContent="--Select Room--"; opt0.disabled=true; opt0.selected=true;
                select.appendChild(opt0);
                allowed.forEach(r=>{ const o=document.createElement("option"); o.value=r.Name; o.textContent=r.Name; select.appendChild(o); });
                container.appendChild(select);

                const btn = document.createElement("button"); btn.className="remove"; btn.textContent="Remove";
                btn.onclick = ()=>{ removeSubject(td.dataset.key.split("_")[0], rowIndex, slotCount, subj); };
                container.appendChild(btn);

                td.appendChild(container);

                for(let i=0;i<slotCount;i++){
                    const key = `${td.dataset.key.split("_")[0]}_${rowIndex+i}`;
                    schedule[key]=subj;
                    if(i>0){ document.querySelector(`td[data-key='${key}']`).style.display="none"; }
                }

                subjects = subjects.filter(s=>s.Id!==subj.Id);
                renderSidebar();
            });
        });

        function removeSubject(day,rowIndex,slots,subj){
            for(let i=0;i<slots;i++){
                const key=`${day}_${rowIndex+i}`;
                delete schedule[key];
                const td=document.querySelector(`td[data-key='${key}']`);
                td.textContent=""; td.style.backgroundColor=""; td.style.color=""; td.style.display=""; td.rowSpan=1;
            }
            if(!subjects.some(s=>s.Id===subj.Id)){ subjects.push(subj); renderSidebar(); }
        }

        renderSidebar();
    </script>